# -*- python -*-
# ex: set syntax=python:
from buildbot.process.properties import WithProperties

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from buildbot.buildslave.ec2 import EC2LatentBuildSlave  

c['slaves'] = [
	BuildSlave("example-slave", "pass"),
	BuildSlave(
 		"bb-openbsd-54", 
		"XXXXXXXXXXXXXXXXXXXXXXXXX",
                properties={"os":"obsd"},
		keepalive_interval=3600, 
		notify_on_missing="jeremy@jeremyrossi.com",
		missing_timeout=900,
	),
#	EC2LatentBuildSlave(
# 		"bb-fbsd-10_0", 
#		"XXXXXXXXXXXXXXXXXXXXXXXX",
#		"t1.micro",
#		ami="ami-23dae94a",
#		user_data="""#!/bin/sh
#env ASSUME_ALWAYS_YES=YES pkg bootstrap
#pkg install -y python py27-pip gmake mysql56-server 
#pw user add -n buildbot -m
#pip install buildbot-slave
#cd /home/buildbot/
#su buildbot -c "buildslave create-slave -r buildslave buildbot.jeremyrossi.com:9989 bb-fbsd-10_0 XXXXXXXXXXXXXXXXXXXXXXXX"
#su buildbot -c "buildslave start buildslave"
#""",        
#		identifier='XXXXXXXXXXXXXXXXXXXXXXXX',
#		secret_identifier='XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
#		keypair_name="new-freebsd-buildbot",
#		
#		
#	),
#	BuildSlave(
# 		"bb-fbsd-10_0", 
#		"XXXXXXXXXXXXXXXXXXXXXXXXX",
#                properties={"os":"fbsd"},
#		keepalive_interval=3600, 
#		notify_on_missing="jeremy@jeremyrossi.com",
#		missing_timeout=900,
#	),
	BuildSlave(
 		"bb-fedora-20", 
		"XXXXXXXXXXXXXXXXXXXXXXXX",
                properties={"os":"lunux","dist":"fedbora","dist-ver":"20"},
		keepalive_interval=3600, 
		notify_on_missing="jeremy@jeremyrossi.com",
		missing_timeout=900,
	),
]


# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/ossec/ossec-hids.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers import basic 
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers import timed
from buildbot.changes import filter
master_all = basic.SingleBranchScheduler(
    name="all",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=[
	#"build-obsd",
	"build-ubuntu",
	#"build-fbsd",
	"build-fedora-20",
	"build-windows-agent",
    ]
)
stable_all = basic.SingleBranchScheduler(
    name="stable",
    change_filter=filter.ChangeFilter(branch='stable'),
    treeStableTimer=None,
    builderNames=[
	#"build-obsd",
	"build-ubuntu",
	#"build-fbsd",
	"build-fedora-20",
	"build-windows-agent",
    ]
)
force = ForceScheduler(
    name="force",
    builderNames=[
	#"build-obsd",
	"build-ubuntu",
	#"build-fbsd",
	"build-fedora-20",
	"build-windows-agent",
	"test-coverity",
    ]
)



coverity_weekly_stable = timed.Nightly(
	name='coverity-weekly-stable',
	onlyIfChanged=True,
	builderNames=[
		"test-coverity"
	],
	branch='stable',
	dayOfWeek=1,
	hour=1,
	minute=0,
)
coverity_weekly_master = timed.Nightly(
	name='coverity-weekly-master',
	onlyIfChanged=True,
	builderNames=[
		"test-coverity"
	],
	branch='master',
	dayOfWeek=1,
	hour=1,
	minute=0,
)

build_rpm_master = basic.Dependent(
    name="build-rpm-master", 
    upstream=master_all, 
    builderNames=["make-rpm"], 
)
build_rpm_stable= basic.Dependent(
    name="build-rpm-stable", 
    upstream=stable_all, 
    builderNames=["make-rpm"], 
)


c['schedulers'] = [
	master_all, 
	stable_all, 
	force, 	
	coverity_weekly_stable,
	coverity_weekly_master,
#	build_rpm_master, 
#	build_rpm_stable, 
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload


coverity = BuildFactory()
coverity.addStep(Git(repourl='git://github.com/ossec/ossec-hids.git', mode='incremental'))
coverity.addStep(ShellCommand(workdir="build/src", command=["make", "TARGET=server", "clean"]))
coverity.addStep(ShellCommand(workdir="build/src", command=["/home/jrossi/cov-analysis-linux64-7.0.2/bin/cov-build","--dir", "cov-int","make", "V=1", "TARGET=server", "build"]))
coverity.addStep(ShellCommand(workdir="build/src", command=["tar","czvf","ossec_coverity.tgz","cov-int"]))

coverity.addStep(ShellCommand(workdir="build/src", 
hideStepIf=lambda results, s: 1, 
command=["curl", 
	"--form", "project=ossec/ossec-hids",
	"--form", "token=XXXXXXXXXXXXXXXXXXXXXXXX", 
	"--form", "email=jeremy@jeremyrossi.com",
	"--form", "file=@ossec_coverity.tgz",
	"--form", WithProperties("version=%s", "branch"), 
	"--form", WithProperties("description=%(branch:-master)s-%(revision:-head)s"),
	"http://scan5.coverity.com/cgi-bin/upload.py",
]))




factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://github.com/ossec/ossec-hids.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(workdir="build/src", command=["make", "test"]))
factory.addStep(ShellCommand(workdir="build/src", command=["make", "V=1", "TARGET=agent","clean", "build"]),)
factory.addStep(ShellCommand(workdir="build/src", command=["make", "V=1", "TARGET=server","clean", "build"]))
factory.addStep(ShellCommand(workdir="build/src", command=["make", "V=1", "DATABASE=mysql", "TARGET=server","clean", "build"]),)


windows_agent_factory = BuildFactory()
windows_agent_factory.addStep(Git(repourl='git://github.com/ossec/ossec-hids.git', mode='incremental'))
windows_agent_factory.addStep(
	ShellCommand(workdir="build/src", command=["make", "TARGET=winagent","clean", "build"]),
)
f = FileUpload(
	slavesrc="src/win-pkg/ossec-win32-agent.exe",
	masterdest=WithProperties(
		"/public/file/poop.jeremyrossi.com/buildbot/ossec-win32-agent-%(branch:-master)s-%(revision:-head)s.exe", 
	),
	mode=0666, 
)
print f
#f.addURL(
#	"Download", 
#	WithProperties(
#		"/files/ossec-win32-agent-%(branch:-master)s-%(revision:-head)s.exe", 
#	),
#)
windows_agent_factory.addStep(f)



from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    	BuilderConfig(
		name="build-ubuntu",
		slavenames=[
			"example-slave",
		],
		factory=factory,
	)
)
#c['builders'].append(
#    	BuilderConfig(
#		name="build-obsd",
#		slavenames=[
#			"bb-openbsd-54", 
#		],
#		factory=factory,
#	)
#)
#c['builders'].append(
#    	BuilderConfig(
#		name="build-fbsd",
#		slavenames=[
#			"bb-fbsd-10_0", 
#		],
#		factory=factory,
#	)
#)
c['builders'].append(
    	BuilderConfig(
		name="build-fedora-20",
		slavenames=[
			"bb-fedora-20", 
		],
		factory=factory,
	)
)

c['builders'].append(
    	BuilderConfig(
		name="build-windows-agent",
		slavenames=[
			"example-slave",
		],
		factory=windows_agent_factory,
	)
)
c['builders'].append(
    	BuilderConfig(
		name="test-coverity",
		slavenames=[
			"example-slave",
		],
		factory=coverity,
	)
)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("jrossi","XXXXXXXXXXXXXXXXXXXXXXXX")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OSSEC Buildbot"
c['titleURL'] = "https://ossec-docs.readthedocs.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
